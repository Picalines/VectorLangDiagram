<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VectorLang</name>
    </assembly>
    <members>
        <member name="T:VectorLang.Model.BooleanInstance">
            <vl-doc>
            <summary>
            Type that has only two values - true and false
            </summary>
            <example>
            let flag = true; // or false
            </example>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.BooleanInstance.op_LogicalNot(VectorLang.Model.BooleanInstance)">
            <vl-doc>
            <returns>
            true for false, false for true
            </returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.BooleanInstance.op_Equality(VectorLang.Model.BooleanInstance,VectorLang.Model.BooleanInstance)">
            <vl-doc>
            <returns>
            true for (true, true) and (false, false)
            </returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.BooleanInstance.op_Inequality(VectorLang.Model.BooleanInstance,VectorLang.Model.BooleanInstance)">
            <vl-doc>
            <returns>
            false for (true, true) and (false, false)
            </returns>
            </vl-doc>
        </member>
        <member name="T:VectorLang.Model.ColorInstance">
            <vl-doc>
            <summary>
            Type that represents RGB color
            </summary>
            <example>
            let redClr = #ff0000; // or rgb(1, 0, 0) or RED constant
            </example>
            </vl-doc>
        </member>
        <member name="P:VectorLang.Model.ColorInstance.R">
            <vl-doc>
            <summary>Red component of RGB (0..1)</summary>
            </vl-doc>
        </member>
        <member name="P:VectorLang.Model.ColorInstance.G">
            <vl-doc>
            <summary>Green component of RGB (0..1)</summary>
            </vl-doc>
        </member>
        <member name="P:VectorLang.Model.ColorInstance.B">
            <vl-doc>
            <summary>Blue component of RGB (0..1)</summary>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.ColorInstance.Blend(VectorLang.Model.ColorInstance,VectorLang.Model.NumberInstance)">
            <vl-doc>
            <returns>
            new color with each component lerped to other color by progress value
            </returns>
            <param name="to">target color</param>
            <param name="progress">lerp parameter (0 - current color, .. , 1 - target color)</param>
            <example>
            RED.lerp(BLUE, 0) // RED
            RED.lerp(BLUE, 1) // BLUE
            RED.lerp(BLUE, 0.5) // rgb(0.5, 0, 0.5)
            </example>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.ColorInstance.op_Addition(VectorLang.Model.ColorInstance,VectorLang.Model.ColorInstance)">
            <vl-doc>
            <returns>
            half-lerped color between the two. The same as calling color.lerp with 0.5
            </returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.ColorInstance.op_Equality(VectorLang.Model.ColorInstance,VectorLang.Model.ColorInstance)">
            <vl-doc>
            <returns>true for two colors with exact same components</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.ColorInstance.op_Inequality(VectorLang.Model.ColorInstance,VectorLang.Model.ColorInstance)">
            <vl-doc>
            <returns>true for two colors with different components</returns>
            </vl-doc>
        </member>
        <member name="T:VectorLang.Model.NumberInstance">
            <vl-doc>
            <summary>
            Type that represents a real number
            </summary>
            <example>
            let x = 123;
            let xDeg = 45deg; // converted to pi/4 radiands
            let xRad = 1rad; // same as just "1". Use to indicate that the value is an angle
            </example>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.Abs">
            <vl-doc>
            <returns>absolute value of number</returns>
            <example>
            123.abs() // 123
            (-123).abs() // 123
            </example>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.Sign">
            <vl-doc>
            <returns>a sign (-1, 0, 1) of number</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.Sqr">
            <vl-doc>
            <returns>a squared number</returns>
            <example>
            (-2).sqr() // 4
            </example>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.Sqrt">
            <vl-doc>
            <returns>square root of number</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.Pow(VectorLang.Model.NumberInstance)">
            <vl-doc>
            <returns>number raised to specified power</returns>
            <param name="power">power of number</param>
            <example>
            2.pow(4) // 16
            </example>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.DegToRad">
            <vl-doc>
            <summary>converts degrees to radians</summary>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.RadToDeg">
            <vl-doc>
            <summary>converts radiands to degrees</summary>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.Sin">
            <vl-doc>
            <returns>sine of number</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.Cos">
            <vl-doc>
            <returns>cosine of number</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.Tan">
            <vl-doc>
            <returns>tangent of number</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.Cot">
            <vl-doc>
            <returns>cot of number</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.Asin">
            <vl-doc>
            <returns>arc sine of number</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.Acos">
            <vl-doc>
            <returns>arc cosing of number</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.Atan">
            <vl-doc>
            <returns>arc tangent of number</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.Exp">
            <vl-doc>
            <returns>e constant raised to the power of current number</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.Ln">
            <vl-doc>
            <returns>natural (base e) log of number</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.Log(VectorLang.Model.NumberInstance)">
            <vl-doc>
            <returns>log of number in specified base</returns>
            <param name="logBase">log base</param>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.Lerp(VectorLang.Model.NumberInstance,VectorLang.Model.NumberInstance)">
            <vl-doc>
            <returns>number linearly interpolated between the current number and target number by progress</returns>
            <param name="to">target number</param>
            <param name="progress">0 - current number, .., 1 - target number</param>
            <example>
            0.lerp(100, 0) // 0
            0.lerp(100, 1) // 100
            0.lerp(100, 0.5) // 50
            </example>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.Min(VectorLang.Model.NumberInstance)">
            <vl-doc>
            <returns>min of current number and specified number</returns>
            <param name="other">other number</param>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.Max(VectorLang.Model.NumberInstance)">
            <vl-doc>
            <returns>max of current number and specified number</returns>
            <param name="other">other number</param>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.Clamp(VectorLang.Model.NumberInstance,VectorLang.Model.NumberInstance)">
            <vl-doc>
            <returns>number clamped between min and lower bounds</returns>
            <param name="min">lower bound</param>
            <param name="max">upper bound</param>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.Round">
            <vl-doc>
            <returns>closest integer number</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.Floor">
            <vl-doc>
            <returns>biggest integer number that is less than the current number</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.Ceil">
            <vl-doc>
            <returns>smallest integer number that is bigger than the current number</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.IsInt">
            <vl-doc>
            <returns>true if the number is integer</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.RoundDigits(VectorLang.Model.NumberInstance)">
            <vl-doc>
            <returns>rounds current number with specified number of digits</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.op_UnaryPlus(VectorLang.Model.NumberInstance)">
            <vl-doc>
            <returns>returns the current number (exists for simmetry)</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.op_UnaryNegation(VectorLang.Model.NumberInstance)">
            <vl-doc>
            <returns>current number with the opposite sign</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.op_Addition(VectorLang.Model.NumberInstance,VectorLang.Model.NumberInstance)">
            <vl-doc>
            <returns>the sum of two numbers</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.op_Subtraction(VectorLang.Model.NumberInstance,VectorLang.Model.NumberInstance)">
            <vl-doc>
            <returns>the difference between the two numbers</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.op_Multiply(VectorLang.Model.NumberInstance,VectorLang.Model.NumberInstance)">
            <vl-doc>
            <returns>multiplication product of two numbers</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.op_Division(VectorLang.Model.NumberInstance,VectorLang.Model.NumberInstance)">
            <vl-doc>
            <returns>division result of two numbers. Crashes the program on 0 denominator</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.op_Modulus(VectorLang.Model.NumberInstance,VectorLang.Model.NumberInstance)">
            <vl-doc>
            <returns>remainder of division of two numbers. Crashes the program on 0 denominator</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.op_Multiply(VectorLang.Model.NumberInstance,VectorLang.Model.VectorInstance)">
            <vl-doc>
            <returns>vector multiplied by a scalar</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.op_Division(VectorLang.Model.NumberInstance,VectorLang.Model.VectorInstance)">
            <vl-doc>
            <returns>vector divided by a scalar</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.op_LessThan(VectorLang.Model.NumberInstance,VectorLang.Model.NumberInstance)">
            <vl-doc>
            <returns>true for number less than the other number</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.op_LessThanOrEqual(VectorLang.Model.NumberInstance,VectorLang.Model.NumberInstance)">
            <vl-doc>
            <returns>true for number less than or equal to the other number</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.op_GreaterThan(VectorLang.Model.NumberInstance,VectorLang.Model.NumberInstance)">
            <vl-doc>
            <returns>true for number greater than the other number</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.op_GreaterThanOrEqual(VectorLang.Model.NumberInstance,VectorLang.Model.NumberInstance)">
            <vl-doc>
            <returns>true for number greater than or equal to the other number</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.op_Equality(VectorLang.Model.NumberInstance,VectorLang.Model.NumberInstance)">
            <vl-doc>
            <returns>true for number equal to the other number</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.NumberInstance.op_Inequality(VectorLang.Model.NumberInstance,VectorLang.Model.NumberInstance)">
            <vl-doc>
            <returns>true for number not equal to the other number</returns>
            </vl-doc>
        </member>
        <member name="T:VectorLang.Model.VectorInstance">
            <vl-doc>
            <summary>Type that represents a 2D vector</summary>
            <example>
            let v = {123, 456};
            </example>
            </vl-doc>
        </member>
        <member name="P:VectorLang.Model.VectorInstance.X">
            <vl-doc>
            <summary>X component of vector</summary>
            </vl-doc>
        </member>
        <member name="P:VectorLang.Model.VectorInstance.Y">
            <vl-doc>
            <summary>Y component of vector</summary>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.VectorInstance.Length">
            <vl-doc>
            <returns>length of vector</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.VectorInstance.Normalized">
            <vl-doc>
            <returns>vector with same direction but length of 1 (or zero)</returns>
            <example>
            {5, 0}.normalized() // {1, 0}
            {0, 0.1}.normalized() // {0, 1}
            {1, 1}.normalized() // {sqrt(2), sqrt(2)}
            </example>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.VectorInstance.Dot(VectorLang.Model.VectorInstance)">
            <vl-doc>
            <returns>dot product of two vectors (sum of multiplied components)</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.VectorInstance.AngleCos(VectorLang.Model.VectorInstance)">
            <vl-doc>
            <returns>cosine of angle between two vectors</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.VectorInstance.Angle(VectorLang.Model.VectorInstance)">
            <vl-doc>
            <returns>angle between two vectors (in radians)</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.VectorInstance.Lerp(VectorLang.Model.VectorInstance,VectorLang.Model.NumberInstance)">
            <vl-doc>
            <returns>
            new vector with each component lerped to target vector by progress
            </returns>
            <param name="to">target vector</param>
            <param name="progress">lerp parameter (0 - current vector, .. , 1 - target vector)</param>
            <example>
            {0, 0}.lerp({10, 10}, 0) // {0, 0}
            {0, 0}.lerp({10, 10}, 1) // {10, 10}
            {0, 0}.lerp({10, 10}, 0.5) // {5, 5}
            </example>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.VectorInstance.ClampLength(VectorLang.Model.NumberInstance,VectorLang.Model.NumberInstance)">
            <vl-doc>
            <returns>
            new vector with length clamped between lower and upper bounds
            </returns>
            <param name="minLength">lower length bound</param>
            <param name="maxLength">upper length bound</param>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.VectorInstance.Rotate(VectorLang.Model.NumberInstance)">
            <vl-doc>
            <returns>vector rotated counterclockwise by angle in radians</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.VectorInstance.Scale(VectorLang.Model.VectorInstance)">
            <vl-doc>
            <returns>new vector with each component multiplied by components of specified vector</returns>
            <example>
            {5, 1}.scale({2, 0.5}) // {10, 0.5}
            </example>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.VectorInstance.op_UnaryPlus(VectorLang.Model.VectorInstance)">
            <vl-doc>
            <returns>the current vector (exists for simmetry)</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.VectorInstance.op_UnaryNegation(VectorLang.Model.VectorInstance)">
            <vl-doc>
            <returns>new vector with each component negated</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.VectorInstance.op_Addition(VectorLang.Model.VectorInstance,VectorLang.Model.VectorInstance)">
            <vl-doc>
            <returns>sum of the two vectors</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.VectorInstance.op_Subtraction(VectorLang.Model.VectorInstance,VectorLang.Model.VectorInstance)">
            <vl-doc>
            <returns>difference between the two vectors</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.VectorInstance.op_Multiply(VectorLang.Model.VectorInstance,VectorLang.Model.VectorInstance)">
            <vl-doc>
            <returns>the dot product of the two vectors</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.VectorInstance.op_Multiply(VectorLang.Model.VectorInstance,VectorLang.Model.NumberInstance)">
            <vl-doc>
            <returns>vector multiplied by a scalar</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.VectorInstance.op_Division(VectorLang.Model.VectorInstance,VectorLang.Model.NumberInstance)">
            <vl-doc>
            <returns>vector divided by a scalar. Crashes the program on zero scalar</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.VectorInstance.op_Equality(VectorLang.Model.VectorInstance,VectorLang.Model.VectorInstance)">
            <vl-doc>
            <returns>true for two vectors with same components</returns>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.VectorInstance.op_Inequality(VectorLang.Model.VectorInstance,VectorLang.Model.VectorInstance)">
            <vl-doc>
            <returns>true for two vectors with different components</returns>
            </vl-doc>
        </member>
        <member name="T:VectorLang.Model.VoidInstance">
            <vl-doc>
            <summary>
            Type that represents "empty value"
            </summary>
            <example>
            def drawSmth() -> void = [ ...; ]; // returns "nothing"
            </example>
            </vl-doc>
        </member>
        <member name="T:VectorLang.Model.ColorLibrary">
            <vl-doc><name>Colors</name></vl-doc>
        </member>
        <member name="F:VectorLang.Model.ColorLibrary.White">
            <vl-doc>
            <name>WHITE</name>
            <summary>Color constant with value #ffffff</summary>
            </vl-doc>
        </member>
        <member name="F:VectorLang.Model.ColorLibrary.Black">
            <vl-doc>
            <name>BLACK</name>
            <summary>Color constant with value #000000</summary>
            </vl-doc>
        </member>
        <member name="F:VectorLang.Model.ColorLibrary.Red">
            <vl-doc>
            <name>RED</name>
            <summary>Color constant with value #ff0000</summary>
            </vl-doc>
        </member>
        <member name="F:VectorLang.Model.ColorLibrary.Greed">
            <vl-doc>
            <name>GREEN</name>
            <summary>Color constant with value #00ff00</summary>
            </vl-doc>
        </member>
        <member name="F:VectorLang.Model.ColorLibrary.Blue">
            <vl-doc>
            <name>BLUE</name>
            <summary>Color constant with value #0000ff</summary>
            </vl-doc>
        </member>
        <member name="F:VectorLang.Model.ColorLibrary.Yellow">
            <vl-doc>
            <name>YELLOW</name>
            <summary>Color constant with value #ffff00</summary>
            </vl-doc>
        </member>
        <member name="F:VectorLang.Model.ColorLibrary.Magenta">
            <vl-doc>
            <name>MAGENTA</name>
            <summary>Color constant with value #ff00ff</summary>
            </vl-doc>
        </member>
        <member name="F:VectorLang.Model.ColorLibrary.Cyan">
            <vl-doc>
            <name>CYAN</name>
            <summary>Color constant with value #00ffff</summary>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.ColorLibrary.Rgb(VectorLang.Model.NumberInstance,VectorLang.Model.NumberInstance,VectorLang.Model.NumberInstance)">
            <vl-doc>
            <name>rgb</name>
            <returns>color with components specified in the arguments</returns>
            </vl-doc>
        </member>
        <member name="T:VectorLang.Model.MathLibrary">
            <vl-doc><name>Math</name></vl-doc>
        </member>
        <member name="F:VectorLang.Model.MathLibrary.PI">
            <vl-doc>
            <name>PI</name>
            <summary>PI constant (3.1415926535897931)</summary>
            </vl-doc>
        </member>
        <member name="F:VectorLang.Model.MathLibrary.E">
            <vl-doc>
            <name>E</name>
            <summary>E constant (2.7182818284590451)</summary>
            </vl-doc>
        </member>
        <member name="F:VectorLang.Model.MathLibrary.Tau">
            <vl-doc>
            <name>Tau</name>
            <summary>Tau constant (6.2831853071795862)</summary>
            </vl-doc>
        </member>
        <member name="F:VectorLang.Model.MathLibrary.Epsilon">
            <vl-doc>
            <name>Epsilon</name>
            <summary>Epsilon constant - smallest real number bigger than 0</summary>
            </vl-doc>
        </member>
        <member name="T:VectorLang.Model.PlotLibrary">
            <vl-doc><name>Plotting</name></vl-doc>
        </member>
        <member name="M:VectorLang.Model.PlotLibrary.Push">
            <vl-doc>
            <name>push</name>
            <summary>
            Pushes current transformation matrix.
            "Starts temporary transformation", that should be ended with pop()
            </summary>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.PlotLibrary.Pop">
            <vl-doc>
            <name>pop</name>
            <summary>
            Pops current transformation matrix.
            "Ends temporary transformation", that was started with push()
            </summary>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.PlotLibrary.Translate(VectorLang.Model.VectorInstance)">
            <vl-doc>
            <name>translate</name>
            <summary>
            Translates next plotted vectors by specified offset
            </summary>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.PlotLibrary.Scale(VectorLang.Model.VectorInstance)">
            <vl-doc>
            <name>scale</name>
            <summary>
            Scales next plotted vectors by specified scale
            </summary>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.PlotLibrary.Rotate(VectorLang.Model.NumberInstance)">
            <vl-doc>
            <name>rotate</name>
            <summary>
            Rotates next plotted vectors by specified angle in radians
            </summary>
            <param name="rotation">angle in radians</param>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.PlotLibrary.Fill(VectorLang.Model.ColorInstance)">
            <vl-doc>
            <name>fill</name>
            <summary>
            Sets the color of next plotted vectors. Affected by push() and pop()
            </summary>
            </vl-doc>
        </member>
        <member name="M:VectorLang.Model.PlotLibrary.Plot(VectorLang.Model.VectorInstance)">
            <vl-doc>
            <name>plot</name>
            <summary>
            Plots given vector to the diagram with applied transformations.
            </summary>
            </vl-doc>
        </member>
    </members>
</doc>
