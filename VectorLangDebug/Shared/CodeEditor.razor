@using VectorLang.Tokenization
@inject IJSRuntime JSRuntime

<textarea id="code" @onchange="args => OnCodeChanged(args.Value!.ToString()!)">@InitialProgram</textarea>

@code {
    [Parameter]
    public string InitialProgram { get; set; } = "";

    [Parameter]
    public EventCallback<string> CodeChanged { get; set; }

    private InputTextArea TextArea = null!;

    private IJSObjectReference? Editor = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            Editor = await JSRuntime.InvokeAsync<IJSObjectReference>("JsLib.initializeCodeEditor", "#code", InitialProgram);
        }
    }

    public async Task ClearErrorsAsync()
    {
        if (Editor is not null)
        {
            await Editor.InvokeVoidAsync("clearErrors");
        }
    }

    public async Task MarkError(TextSelection selection)
    {
        if (Editor is not null)
        {
            await Editor.InvokeVoidAsync("markError", selection);
        }
    }

    private async Task OnCodeChanged(string code)
    {
        if (Editor is null)
        {
            return;
        }

        await CodeChanged.InvokeAsync(code);
    }
}
