@page "/editor"

@using System.Timers
@using VectorLang.Compilation
@using VectorLang.Diagnostics
@using VectorLang.Model
@using VectorLang.Tokenization

<EditorMenu OnViewSelected="windows => _ShownWindows = windows" />

<div id="sections">
    <section id="code-editor-section" style=@(_ShownWindows.HasFlag(EditorWindows.Code) ? "" : "display: none")>
        <CodeEditor @ref=_CodeEditor InitialValue=@ExampleProgram
            OnChange=OnCodeEdited
            CompletionProvider=ProvideCompletions />
    </section>
    <section style=@(_ShownWindows.HasFlag(EditorWindows.Diagram) ? "" : "display: none")>
        @if (_ExecutableProgram is not null)
        {
            <ExternalValuePanel ExternalValues=_ExecutableProgram.ExternalValues OnChange=ExecuteProgram />
        }
        <DiagramView Vectors=_PlottedVectors.Reverse() ErrorMessage=@_ErrorMessage />
    </section>
</div>

@code {
    private const string ExampleProgram = @"
// Velcome to VectorLang!

external aColor = RED;
external bColor = BLUE;

external useZoom = true;
external zoom = {1, 1};

external rotation = 0deg;

def sum(vector a, vector b) -> vector = a + b;

def main() -> void = [
    val a := {1, 0};
    val b := {0, 1};

    if (useZoom)
        scale(zoom);

    rotate(rotation);

    fill(aColor);
    plot(a);

    fill(bColor);
    plot(b);

    fill(aColor.blend(bColor, 0.5));
    plot(sum(a, b));
];
";
}
