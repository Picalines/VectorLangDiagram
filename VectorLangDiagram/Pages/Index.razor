@page "/"

@using System.Timers
@using VectorLang.Compilation
@using VectorLang.Diagnostics
@using VectorLang.Model
@using VectorLang.Tokenization

<div id="sections">
    <section id="code-editor-section">
        <CodeEditor @ref=CodeEditor InitialValue=@ExampleProgram
            OnChange=OnCodeEdited
            CompletionProvider="(location) => Diagnoser?.GetCompletions(location)" />
    </section>
    <section>
        <DiagramView Vectors=LastPlottedVectors ErrorMessage=@RuntimeErrorMessage />
    </section>
</div>

@code {
    private const string ExampleProgram = @"
// Velcome to VectorLang!

def sum(vector a, vector b) -> vector = a + b;

def main() -> void = [
    val a := {1, 0};
    val b := {0, 1};

    fill(RED);
    plot(a);

    fill(BLUE);
    plot(b);

    fill(MAGENTA);
    plot(sum(a, b));
];
";

    private const double CompilationLatency = 250;

    private readonly Timer Timer = new(CompilationLatency);

    private CodeEditor CodeEditor = null!;

    private IReadOnlyList<PlottedVector> LastPlottedVectors = Array.Empty<PlottedVector>();

    private string? RuntimeErrorMessage = null;

    private Diagnoser? Diagnoser;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Timer.Elapsed += async (_, _) => await InvokeAsync(CompileAndRunProgram);
        Timer.AutoReset = false;

        Timer.Start();
    }

    private async Task OnCodeEdited(string code)
    {
        await CodeEditor.ClearReportsAsync();

        RuntimeErrorMessage = null;

        Timer.Stop();
        Timer.Start();
    }

    private async Task CompileAndRunProgram()
    {
        var compiledProgram = ProgramCompiler.Compile(CodeEditor.Value, out Diagnoser);

        foreach (var report in Diagnoser.Reports)
        {
            await CodeEditor.AddReportAsync(report);
        }

        if (compiledProgram is null)
        {
            return;
        }

        try
        {
            LastPlottedVectors = compiledProgram.PlotVectors();
        }
        catch (RuntimeException runtimeException)
        {
            RuntimeErrorMessage = runtimeException.Message;
        }

        StateHasChanged();
    }
}
