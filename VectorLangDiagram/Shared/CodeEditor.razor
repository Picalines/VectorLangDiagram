@using VectorLang.Compilation
@using VectorLang.Diagnostics
@using VectorLang.Model
@using VectorLang.Tokenization

@implements IDisposable

@inject IJSRuntime JSRuntime

<div id="monaco-container" style="height: 100%"></div>

@code {
    [Parameter]
    public string InitialContent { get; set; } = "";

    [Parameter]
    public EventCallback<string> OnContentChange { get; set; }

    [Parameter]
    public Func<TextLocation, IEnumerable<Completion>>? CompletionProvider { get; set; }

    public string Content { get; private set; } = "";

    private DotNetObjectReference<CodeEditor>? _ThisJsReference;

    private IJSObjectReference? _MonacoEditorReference;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Content = InitialContent;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            _ThisJsReference = DotNetObjectReference.Create(this);
            _MonacoEditorReference = await JSRuntime.InvokeAsync<IJSObjectReference>("interop.createMonacoEditor", _ThisJsReference, "#monaco-container", InitialContent);

            await OnDidChangeContent(InitialContent);
        }
    }

    void IDisposable.Dispose()
    {
        _ThisJsReference?.Dispose();
    }

    public async Task SetContentAsync(string content)
    {
        if (_MonacoEditorReference is not null)
        {
            await _MonacoEditorReference.InvokeVoidAsync("setContent", content);
        }
    }

    public async Task AddReportAsync(Report report)
    {
        if (_MonacoEditorReference is not null)
        {
            await _MonacoEditorReference.InvokeVoidAsync("addReport", report);
        }
    }

    public async Task ClearReportsAsync()
    {
        if (_MonacoEditorReference is not null)
        {
            await _MonacoEditorReference.InvokeVoidAsync("clearReports");
        }
    }

    [JSInvokable]
    public async Task OnDidChangeContent(string code)
    {
        Content = code;

        await OnContentChange.InvokeAsync(code);
    }

    [JSInvokable]
    public IEnumerable<Completion> FetchCompletions(int cursorLine, int cursorColumn)
    {
        var cursorLocation = new TextLocation(cursorLine, cursorColumn);

        return CompletionProvider?.Invoke(cursorLocation) ?? Array.Empty<Completion>();
    }
}
