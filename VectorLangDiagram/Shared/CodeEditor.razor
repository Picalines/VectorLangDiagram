@using VectorLang.Compilation
@using VectorLang.Model

@implements IDisposable

@inject IJSRuntime JSRuntime

<div id="monaco-container" style="height: 100%"></div>

@code {
    [Parameter]
    public string InitialCode { get; set; } = "";

    [Parameter]
    public EventCallback<CompiledProgram> OnProgramCompiled { get; set; }

    private DotNetObjectReference<CodeEditor>? ThisJsReference;

    private IJSObjectReference? MonacoEditorReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            ThisJsReference = DotNetObjectReference.Create(this);
            MonacoEditorReference = await JSRuntime.InvokeAsync<IJSObjectReference>("interop.createMonacoEditor", ThisJsReference, "#monaco-container", InitialCode);
        }
    }

    public void Dispose()
    {
        ThisJsReference?.Dispose();
    }

    [JSInvokable]
    public async Task OnDidChangeContent(string code)
    {
        await MonacoEditorReference!.InvokeVoidAsync("clearReports");

        var compiledProgram = ProgramCompiler.Compile(code, out var reports);

        foreach (var report in reports)
        {
            await MonacoEditorReference!.InvokeVoidAsync("addReport", report);
        }

        if (compiledProgram is not null)
        {
            await OnProgramCompiled.InvokeAsync(compiledProgram);
        }
    }
}
