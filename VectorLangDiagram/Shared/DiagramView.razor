@using System.Drawing
@using VectorLang.Model

@inject IJSRuntime JSRuntime

<div id="diagram">
    <div id="diagram-tools-panel">
        <button type="button" @onclick="OnResetViewClick" title="reset view">
            <svg viewBox="0 0 4 4">
                <path stroke="white" d="M 0,1 v -1 h 1 M 3,0 h 1 v 1 M 4,3 v 1 h -1 M 1,4 h -1 v -1" />
            </svg>
        </button>
        @if (ErrorMessage is not null)
        {
            <span id="error-message-span" title="runtime error">@ErrorMessage</span>
        }
    </div>

    <div id="view">
        <svg xmlns="http://www.w3.org/2000/svg"
            viewBox="-10 -10 10 10"
            preserveAspectRatio="xMidYMid slice"
            style="overflow: visible; opacity: @(ErrorMessage is null ? "1" : ".8")"
            id="vectors"
        >
            <defs>
                <pattern id="diagram-background" x=0 y=0 width=1 height=1 patternUnits="userSpaceOnUse">
                    <rect x=0 y=0 width=1 height=1 stroke="#333333" stroke-width=0.05 />
                </pattern>
            </defs>

            <g transform="translate(-5, -5)">
                <rect x=-100 y=-100 width=200 height=200 fill="url(#diagram-background)" />

                <line x1=-100 y1=0 x2=100 y2=0 stroke="#550000" stroke-width=0.05 />
                <line x1=0 y1=-100 x2=0 y2=100 stroke="#005500" stroke-width=0.05 />

                @{
                    _RenderedMarkers.Clear();
                }

                @foreach (var vector in Vectors)
                {
                    @RenderVector(vector)
                }
            </g>
        </svg>
    </div>
</div>

@code {
    [Parameter]
    public IEnumerable<PlottedVector> Vectors { get; set; } = Array.Empty<PlottedVector>();

    [Parameter]
    public string? ErrorMessage { get; set; } = null;

    private IJSObjectReference? _PanZoom;

    private readonly HashSet<string> _RenderedMarkers = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            _PanZoom = await JSRuntime.InvokeAsync<IJSObjectReference>("interop.createPanZoom", "#view");
        }
    }

    private async Task OnResetViewClick()
    {
        if (_PanZoom is not null)
        {
            await _PanZoom.InvokeVoidAsync("reset");
        }
    }

    private RenderFragment RenderVector(PlottedVector vector) => __builder =>
    {
        var vectorColor = GetVectorHTMLColor(vector);
        var (x1, y1, x2, y2) = GetVectorSVGCoords(vector);
        var vectorLength = GetVectorLength(vector);

        var strokeWidth = ToSVGLength(Math.Clamp(vectorLength, 0.2, 0.7) / 10);

        if (vectorLength > 0)
        {
            var markerId = $"plotted-vector-arrow-{vectorColor}";

            if (_RenderedMarkers.Add(markerId))
            {
                <marker id=@markerId markerWidth=5 markerHeight=5
                        refX=3 refY=3 orient=auto>
                    <line x1=3 y1=3 x2=1 y2=2 stroke=@vectorColor stroke-linecap=round />
                    <line x1=3 y1=3 x2=1 y2=4 stroke=@vectorColor stroke-linecap=round />
                </marker>
            }

            <line x1=@x1 y1=@y1 x2=@x2 y2=@y2
                    stroke=@vectorColor stroke-width=@strokeWidth stroke-linecap=round
                    marker-end="url(#@markerId)">
                <title>@vector.Start -> @vector.End</title>
            </line>
        }
        else
        {
            <circle cx=@x1 cy=@y1 r=@strokeWidth fill=@vectorColor>
                <title>@vector.Start</title>
            </circle>
        }
    };

    private static string GetVectorHTMLColor(PlottedVector vector)
    {
        var (r, g, b) = vector.Color;
        return ColorTranslator.ToHtml(Color.FromArgb((int)(r * 255), (int)(g * 255), (int)(b * 255)));
    }

    private static (string x1, string y1, string x2, string y2) GetVectorSVGCoords(PlottedVector vector)
    {
        var x1 = ToSVGLength(vector.Start.X);
        var y1 = ToSVGLength(-vector.Start.Y);
        var x2 = ToSVGLength(vector.End.X);
        var y2 = ToSVGLength(-vector.End.Y);

        return (x1, y1, x2, y2);
    }

    private static double GetVectorLength(PlottedVector vector)
    {
        var dx = vector.End.X - vector.Start.X;
        var dy = vector.End.Y - vector.Start.Y;

        return Math.Sqrt(dx * dx + dy * dy);
    }

    private static string ToSVGLength(double value) => value.ToString(System.Globalization.CultureInfo.InvariantCulture);
}
