@using VectorLang.Model

@inject IJSRuntime JSRuntime

<div style="display: flex; width: 100%; height: 100%" id="diagram">
    <svg xmlns="http://www.w3.org/2000/svg"
        viewBox="@SVGLength(-ViewScale) @SVGLength(-ViewScale) @SVGLength(ViewScale) @SVGLength(ViewScale)"
        preserveAspectRatio="xMidYMid slice"
        id="vectors"
    >
        <g transform="translate(@SVGLength(-ViewScale / 2 + OffsetX), @SVGLength(-ViewScale / 2 + OffsetY))">
            @foreach (var vector in Vectors)
            {
                <PlottedVectorView Vector=vector />
            }
        </g>
    </svg>
</div>

@code {
    [Parameter]
    public IReadOnlyList<PlottedVector> Vectors { get; set; } = Array.Empty<PlottedVector>();

    private IJSObjectReference? PanZoom;

    // TODO: make svg "infinite"

    private double Zoom = 0.01;

    private double OffsetX = 0;

    private double OffsetY = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            PanZoom = await JSRuntime.InvokeAsync<IJSObjectReference>("interop.createPanZoom", "#diagram");
        }
    }

    private double ViewScale => 500;

    private static string SVGLength(double value) => value.ToString(System.Globalization.CultureInfo.InvariantCulture);
}
