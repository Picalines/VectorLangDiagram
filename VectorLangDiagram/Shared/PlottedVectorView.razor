@using System.Drawing
@using VectorLang.Model

@{
    var color = CSSColor;

    var markerId = $"plotted-vector-arrow-{color}";

    var x1 = ToSVGLength(Vector.Start.X);
    var y1 = ToSVGLength(-Vector.Start.Y);
    var x2 = ToSVGLength(Vector.End.X);
    var y2 = ToSVGLength(-Vector.End.Y);

    var textY = ToSVGLength(-(Vector.End.Y + 0.1));

    var strokeWidth = ToSVGLength(Math.Clamp(VectorLength, 0.2, 0.7) / 10);
}

@if (VectorLength > 0)
{
    @if (RenderedMarkers.Add(markerId))
    {
        <marker id=@markerId markerWidth=5 markerHeight=5
                refX=3 refY=3 orient=auto>
            <line x1=3 y1=3 x2=1 y2=2 stroke=@color />
            <line x1=3 y1=3 x2=1 y2=4 stroke=@color />
        </marker>
    }

    <line x1=@x1 y1=@y1 x2=@x2 y2=@y2
        stroke=@color stroke-width=@strokeWidth
        marker-end="url(#@markerId)">
        <title>@Vector.Start -> @Vector.End</title>
    </line>
}
else
{
    <circle cx=@x1 cy=@y1 r=@strokeWidth fill=@color>
        <title>@Vector.Start</title>
    </circle>
}

@code {
    [Parameter, EditorRequired]
    public PlottedVector Vector { get; set; } = null!;

    [CascadingParameter]
    public HashSet<string> RenderedMarkers { get; set; } = new();

    private double VectorLength
    {
        get
        {
            var dx = Vector.End.X - Vector.Start.X;
            var dy = Vector.End.Y - Vector.Start.Y;

            return Math.Sqrt(dx * dx + dy * dy);
        }
    }

    private string CSSColor
    {
        get
        {
            var (r, g, b) = Vector.Color;
            return ColorTranslator.ToHtml(Color.FromArgb((int)(r * 255), (int)(g * 255), (int)(b * 255)));
        }
    }

    private static string ToSVGLength(double value) => value.ToString(System.Globalization.CultureInfo.InvariantCulture);
}
