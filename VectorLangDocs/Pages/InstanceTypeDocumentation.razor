@using VectorLangDocs.Shared.DocumentationModel

@inject NavigationManager NavigationManager

@page "/type/{TypeName}"

@{
    LanguageDocumentation.Types.TryGet(TypeName, out var typeDocumentation);
}

<NavigationHeader HeaderLevel=1 TextInNavigation=@TypeName />

<span id="summary">@typeDocumentation!.Summary</span>

@if (typeDocumentation.UsageExample is { } usageExample)
{
    <CodeBlock Code=@usageExample />
}

<div id="sections">
    @ItemSection("Fields", typeDocumentation.Fields.Items)
    @ItemSection("Methods", typeDocumentation.Methods.Items)
    @ItemSection("Unary operators", typeDocumentation.UnaryOperators.Items)
    @ItemSection("Binary operators", typeDocumentation.BinaryOperators.Items)
</div>

@code {
    [CascadingParameter]
    public VectorLangDocumentation LanguageDocumentation { get; set; } = null!;

    [Parameter]
    public string TypeName { get; set; } = null!;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (LanguageDocumentation.Types.TryGet(TypeName, out _) is false)
        {
            NavigationManager.NavigateTo("404", forceLoad: true);
        }
    }

    private RenderFragment ItemSection(string sectionTitle, IEnumerable<DocumentationItem> items)
    {
        if (items.Any() is false)
        {
            return @<!---->;
        }

        return
    @<section>
        <NavigationHeader HeaderLevel=2 IsSection=true TextInNavigation=@sectionTitle />

        @foreach (var item in items)
        {
            <DocumentationItemView Item="item" />
        }
    </section>;
    }
}
