@using VectorLangDocs.Shared.DocumentationModel

@page "/types"
@page "/constants"
@page "/functions"

@inject NavigationManager NavigationManager

<h1>
    @Capitalize(CurrentPage)
    <CopyButton TextToCopy=@NavigationManager.Uri IconUrl="./svg/copy-link-icon.svg" ButtonTitle="Copy link" Position="CopyButton.PositionType.AfterInlineParent" />
</h1>

<div id="sections">
    @foreach (var itemGroup in GroupedItems)
    {
        <section>
            @if (itemGroup.Key is { } libraryName)
            {
                var sectionUri = PageNavigation.UriOfElement(NavigationManager, libraryName);

                <h2 id="@libraryName" data-nav-section="@libraryName">
                    @Capitalize(libraryName)
                    <CopyButton TextToCopy=@sectionUri IconUrl="./svg/copy-link-icon.svg" ButtonTitle="Copy link" Position="CopyButton.PositionType.AfterInlineParent" />
                </h2>
            }

            @foreach (var item in itemGroup)
            {
                <DocumentationItemView Item="item" />
            }
        </section>
    }
</div>

@code {
    [CascadingParameter]
    public VectorLangDocumentation LanguageDocumentation { get; set; } = null!;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        NavigationManager.LocationChanged += (_, _) => StateHasChanged();
    }

    private string CurrentPage
    {
        get
        {
            var baseLength = NavigationManager.BaseUri.Length;
            var endIndex = NavigationManager.Uri.IndexOf('#') is var index and not -1 ? new System.Index(index) : System.Index.End;
            return NavigationManager.Uri[baseLength..endIndex];
        }
    }

    private IEnumerable<DocumentationItem> Items
    {
        get => CurrentPage switch
        {
            "types" => LanguageDocumentation.Types.Items,
            "constants" => LanguageDocumentation.Constants.Items,
            "functions" => LanguageDocumentation.Functions.Items,
            _ => throw new NotImplementedException(),
        };
    }

    private IEnumerable<IGrouping<string?, DocumentationItem>> GroupedItems
    {
        get => Items.GroupBy(docItem => docItem is ILibraryItemDocumentation { LibraryName: var libraryName } ? libraryName : null);
    }

    private static string Capitalize(string str)
    {
        return str.Length switch
        {
            0 or 1 => str,
            _ => char.ToUpper(str[0]).ToString() + str[1..],
        };
    }
}
