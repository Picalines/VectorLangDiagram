@using VectorLang
@using VectorLangDocs.Shared.DocumentationModel

@inject IJSRuntime JSRuntime

@typeparam TItem where TItem : DocumentationItem

<div id="viewer-root">
    <nav>
        <h3>Navigation</h3>
        @foreach (var item in Repository.Items)
        {
            <a href=@GetItemSelector(item) onclick=@(() => HightlightItem(item))>@GetFormattedItemName(item)</a>
        }
    </nav>
    <div id="item-list">
        @foreach (var item in Repository.Items)
        {
            <article>
                @ItemHeader(item)

                @item.Summary

                @if (item is ICallableDocumentationItem { ReturnValueInfo: var returnTypeInfo, Parameters: var parameters })
                {
                    if (returnTypeInfo is not null)
                    {
                        <section class="returns">
                            <h5>Returns</h5>
                            @returnTypeInfo
                        </section>
                    }

                    if (parameters.Any())
                    {
                        <section class="parameters">
                            <h5>Parameters</h5>
                            @foreach (var parameter in parameters)
                            {
                                <div>
                                    <span class="name">@parameter.Name</span>
                                    @LinkToTypeDocumentation(parameter.ParameterTypeDocumentaion)
                                    @if (parameter.Summary is { } summary)
                                    {
                                        <span class="summary">@summary</span>
                                    }
                                </div>
                            }
                        </section>
                    }
                }

                @if (item.UsageExample is not null)
                {
                    <pre><code>@item.UsageExample</code></pre>
                }
            </article>
        }
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public DocumentationRepository<TItem> Repository { get; set; } = null!;

    public string? NavigateToItem { get; set; } = null;

    private string GetFormattedItemName(TItem item)
    {
        return item switch
        {
            InstanceUnaryOperatorDocumentation unaryOperator => unaryOperator.UnaryOperator.GetFormatted(unaryOperator.InstanceTypeDocumentation.Name),
            InstanceBinaryOperatorDocumentation binaryOperator => binaryOperator.BinaryOperator.GetFormatted(binaryOperator.LeftTypeDocumentation.Name, binaryOperator.RightTypeDocumentation.Name),
            IMemberDocumentationItem member => $"{member.InstanceTypeDocumentation.Name}.{item.Name}",
            _ => item.Name,
        };
    }

    private string GetItemHeaderId(TItem item)
    {
        var id = item switch
        {
            InstanceUnaryOperatorDocumentation unaryOperator => $"op-{unaryOperator.UnaryOperator}-{unaryOperator.InstanceTypeDocumentation.Name}",
            InstanceBinaryOperatorDocumentation binaryOperator => $"op-{binaryOperator.LeftTypeDocumentation.Name}-{binaryOperator.BinaryOperator}-{binaryOperator.RightTypeDocumentation.Name}",
            IMemberDocumentationItem member => $"m-{member.InstanceTypeDocumentation.Name}-{item.Name}",
            _ => item.Name,
        };

        return $"doc-{id.ToLower()}";
    }

    private string GetItemSelector(TItem item)
    {
        return $"#{GetItemHeaderId(item)}";
    }

    private RenderFragment LinkToTypeDocumentation(InstanceTypeDocumentation instanceType)
    {
        return @<a class="type-link" href="/type/@instanceType.Name">@instanceType.Name</a>;
    }

    private RenderFragment ItemHeader(TItem item)
    {
        return
    @<h4 id=@GetItemHeaderId(item)>
        @switch (item)
        {
            case InstanceTypeDocumentation instanceTypeDocumentation:
            {
                @LinkToTypeDocumentation(instanceTypeDocumentation)
            }
            break;

            case ConstantDocumentation constantDocumentation:
            {
                <span>@item.Name: @LinkToTypeDocumentation(constantDocumentation.ConstantTypeDocumentation)</span>
            }
            break;

            case FunctionDocumentation functionDocumentation:
            {
                <span>@item.Name</span>
                <span>(@(string.Join(", ", functionDocumentation.Parameters.Items.Select(p => p.Name))))</span>
                <span> -> @LinkToTypeDocumentation(functionDocumentation.ReturnTypeDocumentation)</span>
            }
            break;

            case InstanceFieldDocumentation instanceFieldDocumentation:
            {
                @LinkToTypeDocumentation(instanceFieldDocumentation.InstanceTypeDocumentation)
                <span>.@item.Name</span>
                <span>: @LinkToTypeDocumentation(instanceFieldDocumentation.FieldTypeDocumentaion)</span>
            }
            break;

            case InstanceMethodDocumentation instanceMethodDocumentation:
            {
                @LinkToTypeDocumentation(instanceMethodDocumentation.InstanceTypeDocumentation)
                <span>.@item.Name</span>
                <span>(@(string.Join(", ", instanceMethodDocumentation.Parameters.Items.Select(p => p.Name))))</span>
                <span> -> @LinkToTypeDocumentation(instanceMethodDocumentation.ReturnTypeDocumentation)</span>
            }
            break;

            case InstanceUnaryOperatorDocumentation instanceUnaryOperatorDocumentation:
            {
                <span>@instanceUnaryOperatorDocumentation.UnaryOperator.GetDescription()</span>
                @LinkToTypeDocumentation(instanceUnaryOperatorDocumentation.InstanceTypeDocumentation)
                <span> -> @LinkToTypeDocumentation(instanceUnaryOperatorDocumentation.ReturnTypeDocumentation)</span>
            }
            break;

            case InstanceBinaryOperatorDocumentation instanceBinaryOperatorDocumentation:
            {
                @LinkToTypeDocumentation(instanceBinaryOperatorDocumentation.LeftTypeDocumentation)
                <span>@(" ")@(instanceBinaryOperatorDocumentation.BinaryOperator.GetDescription())@(" ")</span>
                @LinkToTypeDocumentation(instanceBinaryOperatorDocumentation.RightTypeDocumentation)
                <span> -> @LinkToTypeDocumentation(instanceBinaryOperatorDocumentation.ReturnTypeDocumentation)</span>
            }
            break;

            default:
                throw new NotImplementedException();
        }
    </h4>;
    }

    private async void HightlightItem(TItem item)
    {
        await JSRuntime.InvokeVoidAsync("BlazorAddTemporaryClass", GetItemSelector(item), "highlighted", 2000);
    }
}
