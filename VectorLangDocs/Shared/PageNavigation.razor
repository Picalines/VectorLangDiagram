@using System.Text.Json

@implements IAsyncDisposable

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

@if (_NavSections.Any())
{
    <nav>
        <h3 tabindex="-1">Navigation</h3>

        @foreach (var section in _NavSections)
        {
            <section>
                @if (section is { HeaderTitle: { } sectionTitle, HeaderAnchor: { } sectionAnchor })
                {
                    <h4><a @onclick=@(() => FocusOnElement(sectionAnchor)) tabindex="0">@sectionTitle</a></h4>
                }
                <div class="anchors">
                    @foreach (var anchor in section.Anchors)
                    {
                        <a @onclick=@(() => FocusOnElement(anchor.Anchor!)) tabindex="0">@(anchor.Title!)</a>
                    }
                </div>
            </section>
        }
    </nav>
}

@code {
    public const string BaseDataAttribute = "data-nav-";

    private record NavAnchor(string? Title, string? Anchor);

    private record NavSection(string HeaderTitle, string HeaderAnchor, NavAnchor[] Anchors);

    private IJSObjectReference? _JSModule;

    private NavSection[] _NavSections = Array.Empty<NavSection>();

    private TaskCompletionSource _Initialized = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _JSModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", $"./js/components/{nameof(PageNavigation)}.js");

        NavigationManager.LocationChanged += async (_, _) =>
        {
            await Task.Delay(TimeSpan.FromSeconds(0.1));
            Update();
        };

        _Initialized.SetResult();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            Update();

            if (NavigationManager.Uri.IndexOf('#') is var idIndex and not -1)
            {
                var elementId = NavigationManager.Uri[(idIndex + 1)..];
                FocusOnElement(elementId);
            }
        }
    }

    public async void Update()
    {
        await _Initialized.Task;

        var jsNavSections = await _JSModule!.InvokeAsync<JsonDocument>("QueryNavSections");

        _NavSections = jsNavSections!.Deserialize<NavSection[]>(new JsonSerializerOptions() { PropertyNameCaseInsensitive = true })!;
        StateHasChanged();
    }

    private async void FocusOnElement(string anchor)
    {
        await JSRuntime.InvokeVoidAsync("BlazorUtils.focusOnElement", "#" + anchor);
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_JSModule is not null)
        {
            _Initialized = new();

            await _JSModule.DisposeAsync();
        }
    }
}
